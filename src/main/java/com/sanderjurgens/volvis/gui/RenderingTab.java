package com.sanderjurgens.volvis.gui;

import com.sanderjurgens.volvis.visualization.Renderer;
import com.sanderjurgens.volvis.volume.Volume;
import java.awt.Component;
import java.util.Dictionary;
import java.util.Hashtable;
import javax.swing.JLabel;
import javax.swing.JSlider;

/**
 * The RenderingTab is a Swing JPanel designed to adjust the settings of the
 * volume renderers.
 *
 * @author sanderjurgens
 */
public class RenderingTab extends javax.swing.JPanel {

    /**
     * Constructs a new RenderingTab.
     */
    public RenderingTab() {
        initComponents();

        // Opacity slider set-up
        opacity.setMajorTickSpacing(25);
        Dictionary<Integer, Component> labelTable = new Hashtable<>();
        labelTable.put(0, new JLabel("0"));
        labelTable.put(25, new JLabel("0.25"));
        labelTable.put(50, new JLabel("0.5"));
        labelTable.put(75, new JLabel("0.75"));
        labelTable.put(100, new JLabel("1"));
        opacity.setLabelTable(labelTable);
        opacity.repaint();
    }

    /**
     * Adjust the settings to a newly loaded volume.
     *
     * @param volume a newly loaded volume
     */
    public void setVolume(Volume volume) {
        // Step size (1/10th range, 4 major steps, starting at 1)
        int major = (int) Math.ceil(volume.getDiagonal() / 40);
        setSlider(stepSize, (major * 4) + 1, major, 1);

        // Ray width (1/50th range, 4 major steps, starting at 1)        
        major = (int) Math.ceil(volume.getDiagonal() / 200);
        setSlider(rayWidth, (major * 4) + 1, major, 1);

        // Value (max voxel value, 4 major steps, starting in middle)
        major = (int) Math.floor((volume.getMaximum() - 1) / 4);
        setSlider(value, volume.getMaximum(), major, (major * 2) + 1);

        // Thickness (1/50th range, 4 major steps, starting at 1)
        major = (int) Math.ceil(volume.getDiagonal() / 200);
        setSlider(thickness, (major * 4) + 1, major, 1);

        // Threshold (max voxel value, 4 major steps, starting in middle)
        major = (int) Math.floor((volume.getMaximum() - 1) / 4);
        setSlider(isovalue, volume.getMaximum(), major, (major * 2) + 1);
    }

    /**
     * Generic function for slider set-up.
     *
     * @param slider the slider to set-up
     * @param max the maximum value
     * @param major the spacing of major tick
     * @param value the initial value
     */
    private void setSlider(JSlider slider, int max, int major, int value) {
        slider.setMaximum(max);
        slider.setMajorTickSpacing(major);
        slider.setLabelTable(slider.createStandardLabels(major));
        slider.setValue(value);
        slider.repaint();
    }

    /**
     * Add a new renderer to the selection.
     *
     * @param r a new renderer
     */
    public void addRenderer(Renderer r) {
        renderer.addItem(r.getName());
    }

    /**
     * Returns the selected renderer.
     *
     * @return the selected renderer as an integer
     */
    public int getSelectedRenderer() {
        return renderer.getSelectedIndex();
    }

    /**
     * Return the selected step size for the raycasting renderer.
     *
     * @return the selected step size
     */
    public int getStepSize() {
        return stepSize.getValue();
    }

    /**
     * Return the selected ray width for the raycasting renderer.
     *
     * @return the selected ray width
     */
    public int getRayWidth() {
        return rayWidth.getValue();
    }

    /**
     * Return the number of computational render threads.
     *
     * @return the number of computational render threads
     */
    public int getNumThreads() {
        return (Integer) numThreads.getValue();
    }

    /**
     * Return the (iso)value for contour surfaces rendering.
     *
     * @return the selected (iso)value
     */
    public int getValue() {
        return value.getValue();
    }

    /**
     * Return the opacity of the contour surfaces.
     *
     * @return the opacity of the contour surfaces
     */
    public float getOpacity() {
        return (float) opacity.getValue() / (float) opacity.getMaximum();
    }

    /**
     * Return the thickness the contour surfaces.
     *
     * @return the thickness the contour surfaces
     */
    public int getThickness() {
        return thickness.getValue();
    }

    /**
     * Return the isovalue for rendering the 3D isosurface using the Marching
     * Cubes algorithm.
     *
     * @return the isovalue for rendering the 3D isosurface
     */
    public int getIsovalue() {
        return isovalue.getValue();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rendererPanel = new javax.swing.JPanel();
        rendererLabel = new javax.swing.JLabel();
        renderer = new javax.swing.JComboBox<>();
        raycastingSettings = new javax.swing.JPanel();
        stepSizePanel = new javax.swing.JPanel();
        stepSizeLabel = new javax.swing.JLabel();
        stepSize = new javax.swing.JSlider();
        rayWidthPanel = new javax.swing.JPanel();
        rayWidthLabel = new javax.swing.JLabel();
        rayWidth = new javax.swing.JSlider();
        numThreadPanel = new javax.swing.JPanel();
        numThreadsLabel = new javax.swing.JLabel();
        numThreads = new javax.swing.JSpinner();
        isovalueSettings = new javax.swing.JPanel();
        valuePanel = new javax.swing.JPanel();
        valueLabel = new javax.swing.JLabel();
        value = new javax.swing.JSlider();
        opacityPanel = new javax.swing.JPanel();
        opacityLabel = new javax.swing.JLabel();
        opacity = new javax.swing.JSlider();
        thicknessPanel = new javax.swing.JPanel();
        thicknessLabel = new javax.swing.JLabel();
        thickness = new javax.swing.JSlider();
        marchingSettings = new javax.swing.JPanel();
        isovaluePanel = new javax.swing.JPanel();
        isovalueLabel = new javax.swing.JLabel();
        isovalue = new javax.swing.JSlider();

        setMinimumSize(new java.awt.Dimension(300, 600));
        setPreferredSize(new java.awt.Dimension(300, 600));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.PAGE_AXIS));

        rendererPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 0));
        rendererPanel.setMaximumSize(new java.awt.Dimension(2147483647, 50));
        rendererPanel.setMinimumSize(new java.awt.Dimension(300, 50));
        rendererPanel.setPreferredSize(new java.awt.Dimension(300, 50));
        rendererPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        rendererLabel.setText("Renderer:");
        rendererLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        rendererLabel.setMaximumSize(new java.awt.Dimension(100, 16));
        rendererLabel.setMinimumSize(new java.awt.Dimension(100, 16));
        rendererLabel.setPreferredSize(new java.awt.Dimension(100, 16));
        rendererPanel.add(rendererLabel);

        renderer.setMaximumSize(null);
        rendererPanel.add(renderer);

        add(rendererPanel);

        raycastingSettings.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Ray Casting (RC)"));
        raycastingSettings.setMaximumSize(new java.awt.Dimension(32883, 170));
        raycastingSettings.setMinimumSize(new java.awt.Dimension(300, 170));
        raycastingSettings.setPreferredSize(new java.awt.Dimension(300, 170));
        raycastingSettings.setLayout(new javax.swing.BoxLayout(raycastingSettings, javax.swing.BoxLayout.PAGE_AXIS));

        stepSizePanel.setMaximumSize(new java.awt.Dimension(32877, 44));
        stepSizePanel.setMinimumSize(new java.awt.Dimension(260, 44));
        stepSizePanel.setPreferredSize(new java.awt.Dimension(260, 44));
        stepSizePanel.setLayout(new javax.swing.BoxLayout(stepSizePanel, javax.swing.BoxLayout.LINE_AXIS));

        stepSizeLabel.setText("Ray step size:");
        stepSizeLabel.setMaximumSize(new java.awt.Dimension(100, 16));
        stepSizeLabel.setMinimumSize(new java.awt.Dimension(100, 16));
        stepSizeLabel.setPreferredSize(new java.awt.Dimension(100, 16));
        stepSizePanel.add(stepSizeLabel);

        stepSize.setMaximum(50);
        stepSize.setMinimum(1);
        stepSize.setPaintLabels(true);
        stepSize.setPaintTicks(true);
        stepSize.setValue(1);
        stepSize.setMinimumSize(new java.awt.Dimension(150, 44));
        stepSize.setPreferredSize(new java.awt.Dimension(150, 44));
        stepSizePanel.add(stepSize);

        raycastingSettings.add(stepSizePanel);

        rayWidthPanel.setMinimumSize(new java.awt.Dimension(200, 44));
        rayWidthPanel.setPreferredSize(new java.awt.Dimension(200, 44));
        rayWidthPanel.setLayout(new javax.swing.BoxLayout(rayWidthPanel, javax.swing.BoxLayout.LINE_AXIS));

        rayWidthLabel.setText("Ray width:");
        rayWidthLabel.setMaximumSize(new java.awt.Dimension(100, 16));
        rayWidthLabel.setMinimumSize(new java.awt.Dimension(100, 16));
        rayWidthLabel.setPreferredSize(new java.awt.Dimension(100, 16));
        rayWidthPanel.add(rayWidthLabel);

        rayWidth.setMaximum(10);
        rayWidth.setMinimum(1);
        rayWidth.setPaintLabels(true);
        rayWidth.setPaintTicks(true);
        rayWidth.setValue(1);
        rayWidth.setMinimumSize(new java.awt.Dimension(150, 44));
        rayWidth.setPreferredSize(new java.awt.Dimension(150, 44));
        rayWidthPanel.add(rayWidth);

        raycastingSettings.add(rayWidthPanel);

        numThreadPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 0, 5, 0));
        numThreadPanel.setMaximumSize(new java.awt.Dimension(32767, 32));
        numThreadPanel.setMinimumSize(new java.awt.Dimension(260, 32));
        numThreadPanel.setPreferredSize(new java.awt.Dimension(260, 32));
        numThreadPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        numThreadsLabel.setText("#Threads:");
        numThreadsLabel.setMaximumSize(new java.awt.Dimension(100, 16));
        numThreadsLabel.setMinimumSize(new java.awt.Dimension(100, 16));
        numThreadsLabel.setPreferredSize(new java.awt.Dimension(100, 16));
        numThreadPanel.add(numThreadsLabel);

        numThreads.setModel(new javax.swing.SpinnerNumberModel(1, 1, 4, 1));
        numThreadPanel.add(numThreads);

        raycastingSettings.add(numThreadPanel);

        add(raycastingSettings);

        isovalueSettings.setBorder(javax.swing.BorderFactory.createTitledBorder("Isovalue Contour Surfaces (ICS)"));
        isovalueSettings.setMaximumSize(new java.awt.Dimension(32877, 175));
        isovalueSettings.setMinimumSize(new java.awt.Dimension(300, 175));
        isovalueSettings.setPreferredSize(new java.awt.Dimension(300, 175));
        isovalueSettings.setLayout(new javax.swing.BoxLayout(isovalueSettings, javax.swing.BoxLayout.PAGE_AXIS));

        valuePanel.setLayout(new javax.swing.BoxLayout(valuePanel, javax.swing.BoxLayout.LINE_AXIS));

        valueLabel.setText("Value (fv):");
        valueLabel.setMaximumSize(new java.awt.Dimension(100, 16));
        valueLabel.setMinimumSize(new java.awt.Dimension(100, 16));
        valueLabel.setPreferredSize(new java.awt.Dimension(100, 16));
        valuePanel.add(valueLabel);

        value.setMaximum(255);
        value.setMinimum(1);
        value.setPaintLabels(true);
        value.setPaintTicks(true);
        value.setValue(127);
        value.setMinimumSize(new java.awt.Dimension(150, 44));
        value.setPreferredSize(new java.awt.Dimension(150, 44));
        valuePanel.add(value);

        isovalueSettings.add(valuePanel);

        opacityPanel.setLayout(new javax.swing.BoxLayout(opacityPanel, javax.swing.BoxLayout.LINE_AXIS));

        opacityLabel.setText("Opacity (av):");
        opacityLabel.setMaximumSize(new java.awt.Dimension(100, 16));
        opacityLabel.setMinimumSize(new java.awt.Dimension(100, 16));
        opacityLabel.setPreferredSize(new java.awt.Dimension(100, 16));
        opacityPanel.add(opacityLabel);

        opacity.setPaintLabels(true);
        opacity.setPaintTicks(true);
        opacity.setMinimumSize(new java.awt.Dimension(150, 44));
        opacity.setPreferredSize(new java.awt.Dimension(150, 44));
        opacityPanel.add(opacity);

        isovalueSettings.add(opacityPanel);

        thicknessPanel.setLayout(new javax.swing.BoxLayout(thicknessPanel, javax.swing.BoxLayout.LINE_AXIS));

        thicknessLabel.setText("Thickness (r):");
        thicknessLabel.setMaximumSize(new java.awt.Dimension(100, 16));
        thicknessLabel.setMinimumSize(new java.awt.Dimension(100, 16));
        thicknessLabel.setPreferredSize(new java.awt.Dimension(100, 16));
        thicknessPanel.add(thicknessLabel);

        thickness.setMaximum(10);
        thickness.setMinimum(1);
        thickness.setPaintLabels(true);
        thickness.setPaintTicks(true);
        thickness.setValue(1);
        thickness.setMinimumSize(new java.awt.Dimension(150, 44));
        thickness.setPreferredSize(new java.awt.Dimension(150, 44));
        thicknessPanel.add(thickness);

        isovalueSettings.add(thicknessPanel);

        add(isovalueSettings);

        marchingSettings.setBorder(javax.swing.BorderFactory.createTitledBorder("Marching Cubes (MC)"));
        marchingSettings.setMaximumSize(new java.awt.Dimension(32877, 90));
        marchingSettings.setMinimumSize(new java.awt.Dimension(300, 90));
        marchingSettings.setPreferredSize(new java.awt.Dimension(300, 90));
        marchingSettings.setLayout(new javax.swing.BoxLayout(marchingSettings, javax.swing.BoxLayout.LINE_AXIS));

        isovaluePanel.setLayout(new javax.swing.BoxLayout(isovaluePanel, javax.swing.BoxLayout.LINE_AXIS));

        isovalueLabel.setText("Isovalue:");
        isovalueLabel.setMaximumSize(new java.awt.Dimension(100, 16));
        isovalueLabel.setMinimumSize(new java.awt.Dimension(100, 16));
        isovalueLabel.setPreferredSize(new java.awt.Dimension(100, 16));
        isovaluePanel.add(isovalueLabel);

        isovalue.setMaximum(255);
        isovalue.setMinimum(1);
        isovalue.setPaintLabels(true);
        isovalue.setPaintTicks(true);
        isovalue.setValue(127);
        isovalue.setMinimumSize(new java.awt.Dimension(150, 44));
        isovalue.setPreferredSize(new java.awt.Dimension(150, 44));
        isovaluePanel.add(isovalue);

        marchingSettings.add(isovaluePanel);

        add(marchingSettings);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    /** Settings panel for the isovalue control surfaces renderer */
    private javax.swing.JPanel isovalueSettings;
    /** Settings panel for the marching cubes renderer */
    private javax.swing.JPanel marchingSettings;
    /** Panel containing the computation thread setting */
    private javax.swing.JPanel numThreadPanel;
    /** Spinner for setting the number of computational render threads */
    private javax.swing.JSpinner numThreads;
    /** Label for the computation thread setting */
    private javax.swing.JLabel numThreadsLabel;
    /** Slider for opacity setting */
    private javax.swing.JSlider opacity;
    /** Label for the opacity setting */
    private javax.swing.JLabel opacityLabel;
    /** Panel containing the opacity setting */
    private javax.swing.JPanel opacityPanel;
    /** Slider for adjusting the ray width */
    private javax.swing.JSlider rayWidth;
    /** Label for the ray width setting */
    private javax.swing.JLabel rayWidthLabel;
    /** Panel containing the ray width setting */
    private javax.swing.JPanel rayWidthPanel;
    /** Settings panel for the raycasting renderer */
    private javax.swing.JPanel raycastingSettings;
    /** Dropdown menu to select the current renderer */
    private javax.swing.JComboBox<String> renderer;
    /** Label for the renderer selecter */
    private javax.swing.JLabel rendererLabel;
    /** Panel containing the renderer selecter */
    private javax.swing.JPanel rendererPanel;
    /** Slider fir the ray step size */
    private javax.swing.JSlider stepSize;
    /** Label for the ray step size setting */
    private javax.swing.JLabel stepSizeLabel;
    /** Panel containing the ray step size setting */
    private javax.swing.JPanel stepSizePanel;
    /** Slider for the thickness of the isovalue control surface */
    private javax.swing.JSlider thickness;
    /** Label for the thickness setting */
    private javax.swing.JLabel thicknessLabel;
    /** Panel containing the thickness setting */
    private javax.swing.JPanel thicknessPanel;
    /** Slider for the marching cubes isovalue */
    private javax.swing.JSlider isovalue;
    /** Label for the isovalue setting */
    private javax.swing.JLabel isovalueLabel;
    /** Panel containing the isovalue setting */
    private javax.swing.JPanel isovaluePanel;
    /** Slider for the isovalue */
    private javax.swing.JSlider value;
    /** Label for the isovalue setting */
    private javax.swing.JLabel valueLabel;
    /** Panel containing the isovalue setting */
    private javax.swing.JPanel valuePanel;
    // End of variables declaration//GEN-END:variables
}
